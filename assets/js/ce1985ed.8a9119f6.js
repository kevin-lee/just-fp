"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[771],{2127:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=t(4848),o=t(8453);const s={id:"monoid",title:"Monoid"},d="Monoid",a={id:"typeclass/monoid",title:"Monoid",description:"Monoid is a SemiGroup with identity element which guarantees that",source:"@site/../generated-docs/target/mdoc/typeclass/monoid.md",sourceDirName:"typeclass",slug:"/typeclass/monoid",permalink:"/docs/typeclass/monoid",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"monoid",title:"Monoid"},sidebar:"docsSidebar",previous:{title:"Monad",permalink:"/docs/typeclass/monad"},next:{title:"Semi-Group",permalink:"/docs/typeclass/semi-group"}},r={},c=[{value:"Left Identity",id:"left-identity",level:2},{value:"Right Identity",id:"right-identity",level:2},{value:"Examples",id:"examples",level:2}];function l(n){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"monoid",children:"Monoid"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"Monoid"})," is a ",(0,i.jsx)(e.code,{children:"SemiGroup"})," with identity element which guarantees that\n",(0,i.jsx)(e.code,{children:"Monoid"})," complies with left identity law and right identity law."]}),"\n",(0,i.jsx)(e.h2,{id:"left-identity",children:"Left Identity"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-scala",children:"// Left identity\nMonoid[A].append(Monoid[A].zero, A) // is just A\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-scala",children:'import just.fp._\nimport just.fp.syntax._\n\n// So\nMonoid[List[Int]].append(Monoid[List[Int]].zero, List(1, 2, 3))\n// res0: List[Int] = List(1, 2, 3)\n// The same as\nMonoid[List[Int]].append(List.empty, List(1, 2, 3))\n// res1: List[Int] = List(1, 2, 3)\n\nMonoid[Int].append(Monoid[Int].zero, 999)\n// res2: Int = 999\n// The same as\nMonoid[Int].append(0, 999)\n// res3: Int = 999\n\nMonoid[String].zero |+| "abc"\n// res4: String = "abc"\n// The same as\n"" |+| "abc"\n// res5: String = "abc"\n\nMonoid[Option[Int]].zero.mappend(123.some)\n// res6: Option[Int] = Some(value = 123)\n// The same as\nnone[Int].mappend(123.some)\n// res7: Option[Int] = Some(value = 123)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"right-identity",children:"Right Identity"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-scala",children:"// Right identity\nMonoid[A].append(A, Monoid[A].zero) // is just A\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-scala",children:'import just.fp._\nimport just.fp.syntax._\n\n// So\nMonoid[List[Int]].append(List(1, 2, 3), Monoid[List[Int]].zero)\n// res8: List[Int] = List(1, 2, 3)\n// The same as\nMonoid[List[Int]].append(List(1, 2, 3), List.empty)\n// res9: List[Int] = List(1, 2, 3)\n\nMonoid[Int].append(999, Monoid[Int].zero)\n// res10: Int = 999\n// The same as\nMonoid[Int].append(999, 0)\n// res11: Int = 999\n\n"abc" |+| Monoid[String].zero\n// res12: String = "abc"\n// The same as\n"abc" |+| ""\n// res13: String = "abc"\n\n123.some.mappend(Monoid[Option[Int]].zero)\n// res14: Option[Int] = Some(value = 123)\n// The same as\n123.some.mappend(none[Int])\n// res15: Option[Int] = Some(value = 123)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(e.p,{children:["Example use of ",(0,i.jsx)(e.code,{children:"Monoid"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-scala",children:'def fold[A : Monoid](as: List[A]): A =\n  as.foldLeft(Monoid[A].zero)(_ |+| _)\n\nfold(List(1, 2, 3, 4, 5))\n// res16: Int = 15\n\nfold(List("abc", "def", "ghi"))\n// res17: String = "abcdefghi"\n\nfold(List(1.some, 2.some, none, 4.some, 5.some, none))\n// res18: Option[Int] = Some(value = 12)\n'})})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>d,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function d(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:d(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);